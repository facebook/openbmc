From 624872ce3992768e9ccc30fb2ffb1932ba37cd98 Mon Sep 17 00:00:00 2001
From: Iris Chen <irischenlj@fb.com>
Date: Fri, 22 Jul 2022 13:13:45 -0700
Subject: [PATCH 42/65] hw: spi_gpio: remove MOSI pin

read the cache value directly from gpio controller
instead of only when it is changed to avoid bugs

Signed-off-by: Iris Chen <irischenlj@fb.com>
Signed-off-by: Peter Delevoryas <pdel@fb.com>
---
 hw/arm/aspeed.c           |  3 ---
 hw/ssi/spi_gpio.c         | 14 ++++----------
 include/hw/ssi/spi_gpio.h |  2 +-
 3 files changed, 5 insertions(+), 14 deletions(-)

diff --git a/hw/arm/aspeed.c b/hw/arm/aspeed.c
index b4888ff856..11febc238a 100644
--- a/hw/arm/aspeed.c
+++ b/hw/arm/aspeed.c
@@ -184,7 +184,6 @@ struct AspeedMachineState {
 /* ASPEED GPIO propname values */
 #define AST_GPIO_IRQ_X0_NUM 185
 #define AST_GPIO_IRQ_X3_NUM 188
-#define AST_GPIO_IRQ_X4_NUM 189
 
 #define AST_SMP_MAILBOX_BASE            0x1e6e2180
 #define AST_SMP_MBOX_FIELD_ENTRY        (AST_SMP_MAILBOX_BASE + 0x0)
@@ -398,8 +397,6 @@ static void aspeed_machine_init(MachineState *machine)
                                 qdev_get_gpio_in_named(DEVICE(spi_gpio), "SPI_CS_in", 0));
     qdev_connect_gpio_out_named(DEVICE(&bmc->soc.gpio), "sysbus-irq", AST_GPIO_IRQ_X3_NUM,
                                 qdev_get_gpio_in_named(DEVICE(spi_gpio), "SPI_CLK", 0));
-    qdev_connect_gpio_out_named(DEVICE(&bmc->soc.gpio), "sysbus-irq", AST_GPIO_IRQ_X4_NUM,
-                                qdev_get_gpio_in_named(DEVICE(spi_gpio), "SPI_MOSI", 0));
     object_property_set_bool(OBJECT(spi_gpio->aspeed_gpio), "gpioX5", true, &error_fatal);
 
     aspeed_board_init_flashes(&bmc->soc.fmc,
diff --git a/hw/ssi/spi_gpio.c b/hw/ssi/spi_gpio.c
index 19c9399699..656edd5c24 100644
--- a/hw/ssi/spi_gpio.c
+++ b/hw/ssi/spi_gpio.c
@@ -31,7 +31,8 @@
 static void do_leading_edge(SpiGpioState *s)
 {
     if (!s->CPHA) {
-        s->input_byte |= s->mosi ? 1 : 0;
+        s->input_byte |= object_property_get_bool(OBJECT(s->aspeed_gpio),
+                                                  "gpioX4", NULL);
         /*
          * According to SPI protocol:
          * CPHA=0 leading half clock cycle is sampling phase
@@ -49,7 +50,8 @@ static void do_leading_edge(SpiGpioState *s)
 static void do_trailing_edge(SpiGpioState *s)
 {
     if (s->CPHA) {
-        s->output_byte |= s->mosi ? 1 : 0;
+        s->input_byte |= object_property_get_bool(OBJECT(s->aspeed_gpio),
+                                                  "gpioX4", NULL);
         /*
          * According to SPI protocol:
          * CPHA=1 trailing half clock cycle is sampling phase
@@ -123,12 +125,6 @@ static void clk_set_level(void *opaque, int n, int level)
     }
 }
 
-static void mosi_set_level(void *opaque, int n, int level)
-{
-    SpiGpioState *s = SPI_GPIO(opaque);
-    s->mosi = !!level;
-}
-
 static void spi_gpio_realize(DeviceState *dev, Error **errp)
 {
     SpiGpioState *s = SPI_GPIO(dev);
@@ -141,7 +137,6 @@ static void spi_gpio_realize(DeviceState *dev, Error **errp)
 
     s->cs = true;
     s->clk = true;
-    s->mosi = true;
 
     /* Assuming the first output byte is 0 */
     s->output_byte = 0;
@@ -151,7 +146,6 @@ static void spi_gpio_realize(DeviceState *dev, Error **errp)
     /* init the input GPIO lines */
     qdev_init_gpio_in_named(dev, cs_set_level, "SPI_CS_in", 1);
     qdev_init_gpio_in_named(dev, clk_set_level, "SPI_CLK", 1);
-    qdev_init_gpio_in_named(dev, mosi_set_level, "SPI_MOSI", 1);
 
     /* init the output GPIO lines */
     qdev_init_gpio_out_named(dev, &s->miso_output_pin, "SPI_MISO", 1);
diff --git a/include/hw/ssi/spi_gpio.h b/include/hw/ssi/spi_gpio.h
index 2094a45217..d40bfe151b 100644
--- a/include/hw/ssi/spi_gpio.h
+++ b/include/hw/ssi/spi_gpio.h
@@ -44,7 +44,7 @@ struct SpiGpioState {
     uint32_t output_byte;
     uint32_t input_byte;
 
-    bool clk, mosi, cs, miso;
+    bool clk, cs, miso;
     qemu_irq miso_output_pin, cs_output_pin;
 };
 
-- 
2.38.2

