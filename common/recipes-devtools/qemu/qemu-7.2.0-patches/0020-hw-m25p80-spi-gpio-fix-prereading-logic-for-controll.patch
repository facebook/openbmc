From 6bffe0c3b71b075a9cee1ece8799bb3613dca5e7 Mon Sep 17 00:00:00 2001
From: Iris Chen <irischenlj@fb.com>
Date: Fri, 24 Jun 2022 15:58:03 -0700
Subject: [PATCH 20/65] hw: m25p80: [spi gpio] fix prereading logic for
 controller

Signed-off-by: Iris Chen <irischenlj@fb.com>
Signed-off-by: Peter Delevoryas <pdel@fb.com>
---
 hw/block/m25p80.c    | 21 ++++++++++++++++++++-
 hw/ssi/spi_gpio.c    |  1 +
 hw/ssi/ssi.c         |  4 ----
 include/hw/ssi/ssi.h |  5 +++++
 4 files changed, 26 insertions(+), 5 deletions(-)

diff --git a/hw/block/m25p80.c b/hw/block/m25p80.c
index dd1527f36d..b30f2e4ca1 100644
--- a/hw/block/m25p80.c
+++ b/hw/block/m25p80.c
@@ -1585,6 +1585,25 @@ static uint32_t m25p80_transfer8(SSIPeripheral *ss, uint32_t tx)
     return r;
 }
 
+static uint32_t m25p80_transfer8_ex(SSIPeripheral *ss, uint32_t tx)
+{
+    Flash *s = M25P80(ss);
+    SSIBus *ssibus = (SSIBus *)qdev_get_parent_bus(DEVICE(s));
+
+    uint8_t prev_state = s->state;
+    uint32_t r = m25p80_transfer8(ss, tx);
+    uint8_t curr_state = s->state;
+
+    if (ssibus->preread &&
+       /* cmd state has changed into DATA reading state */
+       (!(prev_state == STATE_READ || prev_state == STATE_READING_DATA) &&
+       (curr_state == STATE_READ || curr_state == STATE_READING_DATA))) {
+        r = m25p80_transfer8(ss, 0xFF);
+    }
+
+    return r;
+}
+
 static void m25p80_write_protect_pin_irq_handler(void *opaque, int n, int level)
 {
     Flash *s = M25P80(opaque);
@@ -1796,7 +1815,7 @@ static void m25p80_class_init(ObjectClass *klass, void *data)
     M25P80Class *mc = M25P80_CLASS(klass);
 
     k->realize = m25p80_realize;
-    k->transfer = m25p80_transfer8;
+    k->transfer = m25p80_transfer8_ex;
     k->set_cs = m25p80_cs;
     k->cs_polarity = SSI_CS_LOW;
     dc->vmsd = &vmstate_m25p80;
diff --git a/hw/ssi/spi_gpio.c b/hw/ssi/spi_gpio.c
index 2350c0a659..19c9399699 100644
--- a/hw/ssi/spi_gpio.c
+++ b/hw/ssi/spi_gpio.c
@@ -134,6 +134,7 @@ static void spi_gpio_realize(DeviceState *dev, Error **errp)
     SpiGpioState *s = SPI_GPIO(dev);
 
     s->spi = ssi_create_bus(dev, "spi");
+    s->spi->preread = true;
 
     s->mode = 0;
     s->clk_counter = 0;
diff --git a/hw/ssi/ssi.c b/hw/ssi/ssi.c
index d54a109bee..b6d62683bf 100644
--- a/hw/ssi/ssi.c
+++ b/hw/ssi/ssi.c
@@ -19,10 +19,6 @@
 #include "qapi/error.h"
 #include "qom/object.h"
 
-struct SSIBus {
-    BusState parent_obj;
-};
-
 #define TYPE_SSI_BUS "SSI"
 OBJECT_DECLARE_SIMPLE_TYPE(SSIBus, SSI_BUS)
 
diff --git a/include/hw/ssi/ssi.h b/include/hw/ssi/ssi.h
index 6950f86810..0f5baf6fcb 100644
--- a/include/hw/ssi/ssi.h
+++ b/include/hw/ssi/ssi.h
@@ -30,6 +30,11 @@ enum SSICSMode {
     SSI_CS_HIGH,
 };
 
+struct SSIBus {
+    BusState parent_obj;
+    bool preread;
+};
+
 /* Peripherals.  */
 struct SSIPeripheralClass {
     DeviceClass parent_class;
-- 
2.38.2

