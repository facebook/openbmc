From 7941d14f1ed5345693e322bb51ab118680ba39f5 Mon Sep 17 00:00:00 2001
From: "karthik.gengan" <gengankarthik@gmail.com>
Date: Fri, 4 Nov 2022 06:31:37 +0000
Subject: [PATCH 501/501] hwmon: (pmbus) Add xdpe132g5c driver

Below 2 commits are squashed into the single patch:

a06f7ec750 hwmon (pmbus/xdpe132g5c): set page to 0 at the beginning of probe
85f694134a [openbmc.celestica][PR] hwmon: (pmbus) add xdpe132g5c driver

This patch is needed by wedge400 and fuji.
---
 drivers/hwmon/pmbus/Kconfig      |   9 ++
 drivers/hwmon/pmbus/Makefile     |   1 +
 drivers/hwmon/pmbus/xdpe132g5c.c | 202 +++++++++++++++++++++++++++++++
 3 files changed, 212 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/xdpe132g5c.c

diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index 294808f5240a..617d45295bb3 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -526,6 +526,15 @@ config SENSORS_XDPE122_REGULATOR
 	help
 	  Uses the xdpe12284 or compatible as regulator.
 
+config SENSORS_XDPE132
+   tristate "Infineon XDPE132 family"
+   help
+     If you say yes here you get hardware monitoring support for Infineon
+     XDPE132G5C, device.
+
+     This driver can also be built as a module. If so, the module will
+     be called xdpe132g5c.
+
 config SENSORS_ZL6100
 	tristate "Intersil ZL6100 and compatibles"
 	help
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index cf8a76744545..f626db4e99e9 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -52,5 +52,6 @@ obj-$(CONFIG_SENSORS_UCD9000)	+= ucd9000.o
 obj-$(CONFIG_SENSORS_UCD9200)	+= ucd9200.o
 obj-$(CONFIG_SENSORS_XDPE122)	+= xdpe12284.o
 obj-$(CONFIG_SENSORS_XDPE152)	+= xdpe152c4.o
+obj-$(CONFIG_SENSORS_XDPE132)   += xdpe132g5c.o
 obj-$(CONFIG_SENSORS_ZL6100)	+= zl6100.o
 obj-$(CONFIG_SENSORS_PIM4328)	+= pim4328.o
diff --git a/drivers/hwmon/pmbus/xdpe132g5c.c b/drivers/hwmon/pmbus/xdpe132g5c.c
new file mode 100644
index 000000000000..d39bb63565da
--- /dev/null
+++ b/drivers/hwmon/pmbus/xdpe132g5c.c
@@ -0,0 +1,202 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Hardware monitoring driver for Infineon Multi-phase Digital VR Controllers
+ *
+ * Copyright (c) 2020 Mellanox Technologies. All rights reserved.
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/sysfs.h>
+#include <linux/pmbus.h>
+#include "pmbus.h"
+
+#define XDPE132_PAGE_NUM		2
+
+/*
+ * Convert xdpe132 output voltage from LINEAR16 format to
+ * show a real world value in milli-unit scale.
+ */
+static ssize_t xdpe132_vout_value_show_page(struct i2c_client *client,
+					     int page,
+					     char *buf)
+{
+	s8 exponent;
+	long val;
+	int ret;
+
+	ret = pmbus_read_word_data(client, page, 0xff, PMBUS_READ_VOUT);
+	if (ret < 0)
+		return ret;
+
+	/* scale output voltage to milli-units( mU ), which is milli-volts( mV )
+	 * in this case.
+	 */
+	val = ((u16) ret)  * 1000L;
+
+	ret = pmbus_read_byte_data(client, page, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	exponent = ((s8)(ret << 3)) >> 3;
+
+	if (exponent >= 0)
+		val <<= exponent;
+	else
+		val >>= -exponent;
+
+	return sprintf(buf, "%ld\n", val);
+}
+
+static ssize_t xdpe132_vout_value_store_page(struct i2c_client *client,
+					      int page,
+					      const char *buf, size_t count)
+{
+
+	u8 vout_mode;
+	s8 exponent;
+	u16 mantissa;
+	int ret, vout_value;
+	long val;
+
+	ret = kstrtoint(buf, 10, &vout_value);
+	if (ret)
+		return ret;
+
+	val = vout_value;
+
+	ret = pmbus_read_byte_data(client, page, PMBUS_VOUT_MODE);
+	if (ret < 0)
+		return ret;
+
+	vout_mode  = ret & GENMASK(7, 5);
+	/* Support only LINEAR mode */
+	if (vout_mode > 0)
+		return -ENODEV;
+
+	/* Convert 2's complement exponent */
+	exponent = ((s8)(ret << 3)) >> 3;
+
+	/* Convert a real world value to LINEAR16 Format */
+	if (exponent >= 0)
+		val >>= exponent;
+	else
+		val <<= -exponent;
+
+	/* Convert mantissa from milli-units to units */
+	mantissa = (u16) DIV_ROUND_CLOSEST(val, 1000L);
+
+	ret = pmbus_write_word_data(client, page, PMBUS_VOUT_COMMAND,
+					   mantissa);
+
+	return (ret < 0) ? ret : count;
+}
+
+static ssize_t xdpe132_vout_value_show(struct device *dev,
+					struct device_attribute *devattr,
+					char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	return xdpe132_vout_value_show_page(client, attr->index, buf);
+}
+
+static ssize_t xdpe132_vout_value_store(struct device *dev,
+				struct device_attribute *devattr,
+				const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev->parent);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(devattr);
+
+	return xdpe132_vout_value_store_page(client, attr->index, buf, count);
+}
+
+static SENSOR_DEVICE_ATTR_RW(vout0_value, xdpe132_vout_value, 0);  //PAGE 0
+static SENSOR_DEVICE_ATTR_RW(vout1_value, xdpe132_vout_value, 1);  //PAGE 1
+
+static struct attribute *vout_value_attrs[] = {
+	&sensor_dev_attr_vout0_value.dev_attr.attr,
+	&sensor_dev_attr_vout1_value.dev_attr.attr,
+	NULL,
+};
+
+static const struct attribute_group vout_value_group = {
+	.attrs = vout_value_attrs,
+};
+
+static const struct attribute_group *xdpe132_attribute_groups[] = {
+	&vout_value_group,
+	NULL,
+};
+
+static struct pmbus_driver_info xdpe132_info = {
+	.pages = XDPE132_PAGE_NUM,
+	.format[PSC_VOLTAGE_IN] = linear,
+	.format[PSC_VOLTAGE_OUT] = linear,
+	.format[PSC_TEMPERATURE] = linear,
+	.format[PSC_CURRENT_IN] = linear,
+	.format[PSC_CURRENT_OUT] = linear,
+	.format[PSC_POWER] = linear,
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+		PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP |
+		PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+	.func[1] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+		PMBUS_HAVE_IIN | PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+		PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP |
+		PMBUS_HAVE_POUT | PMBUS_HAVE_PIN | PMBUS_HAVE_STATUS_INPUT,
+	.groups = xdpe132_attribute_groups,
+};
+
+static int xdpe132_probe(struct i2c_client *client)
+{
+	struct pmbus_driver_info *info;
+
+	info = devm_kmemdup(&client->dev, &xdpe132_info, sizeof(*info),
+			    GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	/*
+	 * Sometimes the device stays at page "0xff" which leads to
+	 * probe failure, so let's set page to 0 at the beginning.
+	 */
+	i2c_smbus_write_byte_data(client, PMBUS_PAGE, 0);
+
+	return pmbus_do_probe(client, info);
+}
+
+static const struct i2c_device_id xdpe132_id[] = {
+	{"xdpe132g5c", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, xdpe132_id);
+
+static const struct of_device_id __maybe_unused xdpe132_of_match[] = {
+	{.compatible = "infineon,xdpe132g5c"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, xdpe132_of_match);
+
+static struct i2c_driver xdpe132_driver = {
+	.driver = {
+		.name = "xdpe132g5c",
+		.of_match_table = of_match_ptr(xdpe132_of_match),
+	},
+	.probe_new = xdpe132_probe,
+	.id_table = xdpe132_id,
+};
+
+module_i2c_driver(xdpe132_driver);
+
+MODULE_AUTHOR("Facebook/Celestica");
+MODULE_DESCRIPTION("PMBus driver for Infineon XDPE132 family");
+MODULE_LICENSE("GPL");
+MODULE_IMPORT_NS(PMBUS);
-- 
2.43.0

