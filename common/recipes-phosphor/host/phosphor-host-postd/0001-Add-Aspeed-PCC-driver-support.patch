From 3b53f0ba12a6a819659d0ae1686037af551bf5c1 Mon Sep 17 00:00:00 2001
From: cchoux <cosmo.chou@quantatw.com>
Date: Tue, 5 Dec 2023 14:05:23 +0800
Subject: [PATCH 1/1] Add Aspeed PCC driver support

Add support for Aspeed Post Code Capture driver.

In order to fetch post code from Aspeed PCC driver, please set
`snoop-device` and `post-code-bytes` as below.
- snoop-device = aspeed-lpc-pcc
- post-code-bytes = 8

Tested on Harma system.

Change-Id: I5806362d2a54d1ed7b7f821d512f79cbc3effd38
Signed-off-by: Cosmo Chou <cosmo.chou@quantatw.com>
Signed-off-by: Potin Lai <potin.lai@quantatw.com>
---
 main.cpp | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/main.cpp b/main.cpp
index e977ce0..b5be7b1 100644
--- a/main.cpp
+++ b/main.cpp
@@ -42,8 +42,12 @@
 #include <optional>
 #include <thread>
 
+constexpr size_t pccSize = sizeof(uint16_t); // 2 bytes per code
+
 static size_t codeSize = 1; /* Size of each POST code in bytes */
 static bool verbose = false;
+static std::function<int(uint64_t&, ssize_t)> procPostCode;
+static std::vector<uint16_t> aspeedPccBuffer;
 
 static void usage(const char* name)
 {
@@ -121,6 +125,62 @@ bool rateLimit(PostReporter& reporter, sdeventplus::source::IO& ioSource)
     return true;
 }
 
+/*
+ * Split input code into multiple 2 bytes PCC code, If the PCC code prefix
+ * matches the check code, store each PCC code in aspeedPccBuffer, or clear
+ * aspeedPccBuffer if the prefix does not match.
+ *
+ * Each PCC code contains one byte of port number (MSB) and another byte of
+ * partial postcode (LSB). To get a compelete postcode, the PCC code should
+ * followed the sequence of 0x40AA, 0x41BB, 0x42CC & 0x43DD. When
+ * aspeedPccBuffer contains enough PCC codes, the postcode will be assigned as
+ * 0xDDCCBBAA.
+ */
+int aspeedPcc(uint64_t& code, ssize_t readb)
+{
+    const size_t fullPostPccCount = codeSize / pccSize;
+    uint16_t* codePtr = reinterpret_cast<uint16_t*>(&code);
+    size_t i;
+
+    for (i = 0; i < (readb / pccSize); i++)
+    {
+        uint16_t checkCode = 0x4000 + ((aspeedPccBuffer.size() % 4) << 8);
+
+        if (checkCode == (codePtr[i] & 0xFF00))
+        {
+            aspeedPccBuffer.push_back(codePtr[i]);
+        }
+        else
+        {
+            aspeedPccBuffer.clear();
+
+            // keep the PCC code if codePtr[i] matches with 0x40XX as first PCC
+            // code in buffer.
+            if ((codePtr[i] & 0xFF00) == 0x4000)
+            {
+                aspeedPccBuffer.push_back(codePtr[i]);
+            }
+        }
+    }
+
+    if (aspeedPccBuffer.size() < fullPostPccCount)
+    {
+        // not receive full postcode yet.
+        return -1;
+    }
+
+    // prepare postcode and remove the prefix bytes
+    code = 0;
+    for (size_t i = 0; i < fullPostPccCount; i++)
+    {
+        code |= static_cast<uint64_t>(aspeedPccBuffer[i] & 0x00FF) << (8 * i);
+    }
+    aspeedPccBuffer.erase(aspeedPccBuffer.begin(),
+                          aspeedPccBuffer.begin() + fullPostPccCount);
+
+    return 0;
+}
+
 /*
  * Callback handling IO event from the POST code fd. i.e. there is new
  * POST code available to read.
@@ -133,6 +193,11 @@ void PostCodeEventHandler(PostReporter* reporter, sdeventplus::source::IO& s,
 
     while ((readb = read(postFd, &code, codeSize)) > 0)
     {
+        if (procPostCode && procPostCode(code, readb) < 0)
+        {
+            return;
+        }
+
         code = le64toh(code);
         if (verbose)
         {
@@ -243,6 +308,10 @@ int main(int argc, char* argv[])
                 break;
             }
             case 'd':
+                if (std::string(optarg) == "/dev/aspeed-lpc-pcc")
+                {
+                    procPostCode = aspeedPcc;
+                }
 
                 postFd = open(optarg, O_NONBLOCK);
                 if (postFd < 0)
-- 
2.31.1

