From 74d7ded1d1486e809f8a7043ccc2573a09930951 Mon Sep 17 00:00:00 2001
From: Peter Delevoryas <peter@pjd.dev>
Date: Tue, 23 Aug 2022 16:57:35 -0700
Subject: [PATCH 48/65] hw/misc/aspeed: Add fby35 server board bridge IC

Signed-off-by: Peter Delevoryas <peter@pjd.dev>
---
 hw/arm/fby35.h         |  35 +++++
 hw/misc/fby35_sb_bic.c | 342 +++++++++++++++++++++++++++++++++++++++++
 hw/misc/meson.build    |   1 +
 hw/misc/trace-events   |   4 +
 4 files changed, 382 insertions(+)
 create mode 100644 hw/misc/fby35_sb_bic.c

diff --git a/hw/arm/fby35.h b/hw/arm/fby35.h
index b8fbd1bf9a..20bd43fbae 100644
--- a/hw/arm/fby35.h
+++ b/hw/arm/fby35.h
@@ -107,4 +107,39 @@ static const uint8_t fby35_fruid_nic[] = {
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 };
 
+static const uint8_t fby35_fruid_slot[] = {
+    0x01, 0x00, 0x01, 0x05, 0x11, 0x00, 0x00, 0xe8, 0x01, 0x04, 0x17, 0xc3, 0x4e, 0x2f, 0x41, 0xc3,
+    0x4e, 0x2f, 0x41, 0xcd, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x0c, 0x00, 0x93, 0x28, 0xd1, 0xc6, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0xd2, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x20, 0x4c, 0x61, 0x6b,
+    0x65, 0x2d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0xcd, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0xce, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0xc3, 0x31, 0x2e, 0x30, 0xc9, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0xd2, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0xc1, 0x94, 0x01, 0x0d, 0x00, 0xc6, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0xd0, 0x43, 0x72, 0x61, 0x74, 0x65, 0x72, 0x20, 0x4c, 0x61, 0x6b, 0x65, 0x20, 0x45,
+    0x56, 0x54, 0x32, 0xce, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0xc7, 0x59, 0x6f, 0x43, 0x4c, 0x30, 0x33, 0x35, 0xd6, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
+    0x58, 0xc7, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0xc3, 0x31, 0x2e, 0x30, 0xc9, 0x58, 0x58,
+    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0xc3, 0x4e, 0x2f, 0x41, 0xc1, 0x00, 0x00, 0x00, 0xaf,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x7f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xb7, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00,
+    0x20, 0xf5, 0xf3, 0xec, 0xfd, 0x7f, 0x00, 0x00, 0xb0, 0x2a, 0xb3, 0xff, 0xa9, 0x7f, 0x00, 0x00,
+    0x30, 0xf6, 0xf3, 0xec, 0xfd, 0x7f, 0x00, 0x00, 0x30, 0xf6, 0xf3, 0xec, 0xfd, 0x7f, 0x00, 0x00,
+    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb5, 0xb3, 0x6b, 0xff, 0xa9, 0x7f, 0x00, 0x00,
+    0x80, 0xcc, 0x7a, 0xff, 0xa9, 0x7f, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe1, 0x64, 0xff, 0xa9, 0x7f, 0x00, 0x00,
+    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf2, 0x64, 0xff, 0xa9, 0x7f, 0x00, 0x00,
+    0xe0, 0xcc, 0x7a, 0xff, 0xa9, 0x7f, 0x00, 0x00, 0x00, 0xa0, 0xaf, 0x01, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x5b, 0xf3, 0x84, 0xc6, 0x25, 0x54,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x80, 0xcc, 0x7a, 0xff, 0xa9, 0x7f, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+};
+
 #endif
diff --git a/hw/misc/fby35_sb_bic.c b/hw/misc/fby35_sb_bic.c
new file mode 100644
index 0000000000..245fd2df5a
--- /dev/null
+++ b/hw/misc/fby35_sb_bic.c
@@ -0,0 +1,342 @@
+/*
+ * fby35 Server Board Bridge Interconnect
+ *
+ * Copyright (c) Meta Platforms, Inc. and affiliates. (http://www.meta.com)
+ *
+ * This code is licensed under the GPL version 2 or later. See the COPYING
+ * file in the top-level directory.
+ */
+
+#include "qemu/osdep.h"
+#include "qemu/main-loop.h"
+#include "qemu/log.h"
+#include "hw/i2c/i2c.h"
+#include "hw/arm/fby35.h"
+#include "trace.h"
+
+#define IPMB_DATA_MAX_LENGTH 520
+#define IPMB_HEADER_LENGTH 6
+#define IPMB_CHECKSUM_LENGTH 1
+#define IPMB_COMPLETION_CODE_LENGTH 1
+#define IPMB_COMPLETION_CODE_SUCCESS 0x00
+#define IPMB_COMPLETION_CODE_INVALID_LENGTH 0xC7
+#define IPMB_COMPLETION_CODE_LENGTH_EXCEEDED 0xC8
+
+#define TYPE_FBY35_SB_BIC "fby35-sb-bic"
+OBJECT_DECLARE_SIMPLE_TYPE(BicState, FBY35_SB_BIC);
+
+struct BicState {
+    I2CSlave parent_obj;
+
+    I2CBus *bus;
+    QEMUBH *tx_task;
+    int rx_len;
+    int tx_len;
+    int tx_pos;
+    uint8_t rx_buf[512];
+    uint8_t tx_buf[512];
+};
+
+static void bic_tx_task(void *opaque)
+{
+    BicState *s = opaque;
+
+    switch (s->tx_pos) {
+    case 0:
+        if (i2c_start_send_async(s->bus, s->tx_buf[s->tx_pos++]) != 0) {
+            break;
+        }
+        return;
+    default:
+        if (s->tx_pos >= s->tx_len) {
+            break;
+        }
+        if (i2c_send_async(s->bus, s->tx_buf[s->tx_pos++]) != 0) {
+            break;
+        }
+        return;
+    }
+
+    i2c_end_transfer(s->bus);
+    i2c_bus_release(s->bus);
+}
+
+static void bic_realize(DeviceState *dev, Error **errp)
+{
+    BicState *s = FBY35_SB_BIC(dev);
+
+    s->bus = I2C_BUS(qdev_get_parent_bus(dev));
+    s->tx_task = qemu_bh_new(bic_tx_task, s);
+    s->rx_len = 0;
+    s->tx_len = 0;
+    s->tx_pos = 0;
+    memset(s->rx_buf, 0, sizeof(s->rx_buf));
+    memset(s->tx_buf, 0, sizeof(s->tx_buf));
+}
+
+static uint8_t checksum(const uint8_t *buf, int len)
+{
+    int sum = 0;
+
+    for (int i = 0; i < len; i++) {
+        sum += buf[i];
+    }
+    return 256 - sum;
+}
+
+typedef struct IPMBMessage IPMBMessage;
+
+struct IPMBMessage {
+    uint8_t dst_addr;
+    uint8_t dst_lun;
+    uint8_t src_addr;
+    uint8_t src_lun;
+    uint8_t netfn;
+    uint8_t seq;
+    uint8_t cmd;
+    uint8_t completion_code;
+    uint16_t data_len;
+    uint8_t data[IPMB_DATA_MAX_LENGTH];
+};
+
+static bool is_ipmb_response(const IPMBMessage *msg)
+{
+    return msg->netfn & 1;
+}
+
+static int encode_ipmb_message(const IPMBMessage *msg, uint8_t *buf, int cap)
+{
+    int n = 0;
+
+    g_assert(cap >= IPMB_HEADER_LENGTH + msg->data_len + IPMB_CHECKSUM_LENGTH
+             + (is_ipmb_response(msg) ? IPMB_COMPLETION_CODE_LENGTH : 0));
+
+    buf[n++] = msg->dst_addr;
+    buf[n++] = (msg->netfn << 2) | msg->dst_lun;
+    buf[n] = checksum(buf, n);
+    n++;
+    buf[n++] = msg->src_addr;
+    buf[n++] = (msg->seq << 2) | msg->src_lun;
+    buf[n++] = msg->cmd;
+    if (is_ipmb_response(msg)) {
+        buf[n++] = msg->completion_code;
+    }
+    memcpy(&buf[n], msg->data, msg->data_len);
+    n += msg->data_len;
+
+    buf[n] = checksum(buf, n);
+    n++;
+
+    /* QEMU's expecting a 7-bit I2C address. */
+    buf[0] >>= 1;
+
+    return n;
+}
+
+static int decode_ipmb_message(const uint8_t *buf, int len, IPMBMessage *msg)
+{
+    memset(msg, 0, sizeof(*msg));
+
+    if (len < IPMB_HEADER_LENGTH + IPMB_CHECKSUM_LENGTH) {
+        qemu_log_mask(LOG_GUEST_ERROR, "%s: length too small: %d\n", __func__,
+                      len);
+        return -1;
+    }
+
+    msg->dst_addr = buf[0];
+    msg->dst_lun  = buf[1] & 0b11;
+    msg->src_addr = buf[3];
+    msg->src_lun  = buf[4] & 0b11;
+    msg->netfn    = buf[1] >> 2;
+    msg->seq      = buf[4] >> 2;
+    msg->cmd      = buf[5];
+    msg->data_len = len - IPMB_HEADER_LENGTH - IPMB_CHECKSUM_LENGTH;
+    if (is_ipmb_response(msg)) {
+        msg->data_len -= IPMB_COMPLETION_CODE_LENGTH;
+        msg->completion_code =
+            len > IPMB_HEADER_LENGTH ? buf[IPMB_HEADER_LENGTH] : 0;
+    }
+    msg->data_len = MAX(msg->data_len, 0);
+    memcpy(msg->data, &buf[IPMB_HEADER_LENGTH], msg->data_len);
+
+    return 0;
+}
+
+static void ipmb_append_data(IPMBMessage *msg, uint8_t data)
+{
+    g_assert(msg->data_len < sizeof(msg->data));
+    msg->data[msg->data_len++] = data;
+}
+
+static void ipmb_extend_data(IPMBMessage *msg, const uint8_t *buf, int len)
+{
+    g_assert(msg->data_len + len < sizeof(msg->data));
+    memcpy(&msg->data[msg->data_len], buf, len);
+    msg->data_len += len;
+}
+
+static void read_fru(BicState *s, const IPMBMessage *request, IPMBMessage *response)
+{
+    const uint8_t *fru = fby35_fruid_slot; /* Assume we're getting the slot FRUID. */
+    int fru_size = sizeof(fru);
+    uint8_t device_id;
+    uint16_t offset;
+    uint8_t len;
+
+    if (request->data_len != 4) {
+        response->completion_code = IPMB_COMPLETION_CODE_INVALID_LENGTH;
+        return;
+    }
+
+    device_id = request->data[0];
+    (void)device_id; /* Ignore device ID */
+    offset = request->data[1] | (request->data[2] << 8);
+    len = request->data[3];
+
+    if (len > 32 || offset + len > fru_size) {
+        response->completion_code = IPMB_COMPLETION_CODE_LENGTH_EXCEEDED;
+        return;
+    }
+
+    ipmb_append_data(response, len + 1);
+    ipmb_extend_data(response, &fru[offset], len);
+}
+
+static int handle_ipmb_request(BicState *s, const IPMBMessage *request,
+                               IPMBMessage *response)
+{
+    I2CSlave *i2c = I2C_SLAVE(s);
+
+    g_assert(request->dst_addr == i2c->address);
+    g_assert(!is_ipmb_response(request));
+
+    memset(response, 0, sizeof(*response));
+    response->dst_addr = request->src_addr;
+    response->dst_lun  = request->src_lun;
+    response->src_addr = request->dst_addr;
+    response->src_lun  = request->dst_lun;
+    response->netfn    = request->netfn + 1;
+    response->seq      = request->seq;
+    response->cmd      = request->cmd;
+    response->completion_code = IPMB_COMPLETION_CODE_SUCCESS;
+
+    switch (request->netfn) {
+    case 0x06:
+        switch (request->cmd) {
+        case 0x04:
+            ipmb_append_data(response, 0x55);
+            ipmb_append_data(response, 0x00);
+            break;
+        }
+        break;
+    case 0x0a:
+        switch (request->cmd) {
+        case 0x10:
+            ipmb_append_data(response, sizeof(fby35_fruid_slot) & 0xFF);
+            ipmb_append_data(response, sizeof(fby35_fruid_slot) >> 8);
+            ipmb_append_data(response, 0); /* FRU access type: byte */
+            break;
+        case 0x11:
+            read_fru(s, request, response);
+            break;
+        }
+        break;
+    default:
+        qemu_log_mask(LOG_UNIMP, "%s: netfn 0x%02x cmd 0x%02x unimplemented\n",
+                      __func__, request->netfn, request->cmd);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int bic_i2c_event(I2CSlave *i2c, enum i2c_event event)
+{
+    BicState *s = FBY35_SB_BIC(i2c);
+    IPMBMessage request, response;
+
+    switch (event) {
+    case I2C_START_SEND:
+        memset(s->rx_buf, 0, sizeof(s->rx_buf));
+        s->rx_len = 0;
+        s->rx_buf[s->rx_len++] = i2c->address;
+        break;
+    case I2C_FINISH:
+        if (decode_ipmb_message(s->rx_buf, s->rx_len, &request)) {
+            break;
+        }
+
+        trace_fby35_sb_bic_ipmb_message(request.src_addr,
+                                        request.dst_addr,
+                                        request.netfn,
+                                        request.cmd,
+                                        request.seq,
+                                        request.completion_code);
+        for (int i = 0; i < request.data_len; i++) {
+            trace_fby35_sb_bic_ipmb_message_data(i, request.data[i]);
+        }
+
+        if (handle_ipmb_request(s, &request, &response)) {
+            break;
+        }
+
+        s->tx_len = encode_ipmb_message(&response, s->tx_buf, sizeof(s->tx_buf));
+        s->tx_pos = 0;
+
+        trace_fby35_sb_bic_ipmb_message(response.src_addr,
+                                        response.dst_addr,
+                                        response.netfn,
+                                        response.cmd,
+                                        response.seq,
+                                        response.completion_code);
+        for (int i = 0; i < response.data_len; i++) {
+            trace_fby35_sb_bic_ipmb_message_data(i, response.data[i]);
+        }
+
+        i2c_bus_master(s->bus, s->tx_task);
+        break;
+    case I2C_START_RECV:
+    case I2C_START_SEND_ASYNC:
+    case I2C_NACK:
+        return -1;
+    }
+
+    return 0;
+}
+
+static uint8_t bic_i2c_recv(I2CSlave *i2c)
+{
+    return 0xff;
+}
+
+static int bic_i2c_send(I2CSlave *i2c, uint8_t data)
+{
+    BicState *s = FBY35_SB_BIC(i2c);
+
+    assert(s->rx_len < sizeof(s->rx_buf));
+    s->rx_buf[s->rx_len++] = data;
+
+    return 0;
+}
+
+static void bic_class_init(ObjectClass *oc, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(oc);
+    I2CSlaveClass *i2c = I2C_SLAVE_CLASS(oc);
+
+    dc->realize = bic_realize;
+    i2c->event = bic_i2c_event;
+    i2c->recv = bic_i2c_recv;
+    i2c->send = bic_i2c_send;
+}
+
+static const TypeInfo types[] = {
+    {
+        .name = TYPE_FBY35_SB_BIC,
+        .parent = TYPE_I2C_SLAVE,
+        .instance_size = sizeof(BicState),
+        .class_init = bic_class_init,
+    },
+};
+
+DEFINE_TYPES(types);
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 27e448a8cf..834c082be9 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -119,6 +119,7 @@ softmmu_ss.add(when: 'CONFIG_ASPEED_SOC', if_true: files(
   'aspeed_xdma.c',
   'aspeed_peci.c',
   'fby35_sb_cpld.c',
+  'fby35_sb_bic.c',
   'intel_me.c'))
 
 softmmu_ss.add(when: 'CONFIG_MSF2', if_true: files('msf2-sysreg.c'))
diff --git a/hw/misc/trace-events b/hw/misc/trace-events
index 2ebc032531..0df42ebd2e 100644
--- a/hw/misc/trace-events
+++ b/hw/misc/trace-events
@@ -279,6 +279,10 @@ lasi_chip_write(uint64_t addr, uint32_t val) "addr 0x%"PRIx64" val 0x%08x"
 fby35_sb_cpld_read(uint8_t reg, uint8_t value) "reg 0x%02x value 0x%02x"
 fby35_sb_cpld_write(uint8_t reg, uint8_t value) "reg 0x%02x value 0x%02x"
 
+# fby35_sb_bic.c
+fby35_sb_bic_ipmb_message(uint8_t src, uint8_t dst, uint8_t netfn, uint8_t cmd, uint8_t seq, uint8_t cc) "src 0x%02x dst 0x%02x netfn 0x%02x cmd 0x%02x seq 0x%02x cc 0x%02x"
+fby35_sb_bic_ipmb_message_data(uint16_t i, uint8_t data) "data[%u]: 0x%02x"
+
 # intel_me.c
 intel_me_rx_start(uint8_t addr) "addr 0x%02x"
 intel_me_rx_data(uint8_t addr, uint8_t data) "addr 0x%02x data 0x%02x"
-- 
2.38.2

