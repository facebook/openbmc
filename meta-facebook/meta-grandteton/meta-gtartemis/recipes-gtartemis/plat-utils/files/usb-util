#!/bin/bash
#
# Copyright 2023-present Facebook. All Rights Reserved.
#
# This program file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program in a file named COPYING; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

readonly EXIT_ERROR=255

show_usage() {
    echo "Usage: [Artemis Module]:"
    echo "       usb-util bus-id cb port"
    echo "       usb-util bus-id cb_accl[1..12]_[1..2] port"
    echo "       usb-util [ bind | unbind ] cb port "
    echo "       usb-util [ bind | unbind ] cb_accl[1..12]_[1..2] port"
}

check_file_exist() {
    local found=0
    local i=0
    local DIR=/sys/bus/usb/devices/"$busid"
    while [ "$i" -le "$retry" ]; do
        if [ -d "$DIR" ]; then
        # if usb path exist
            found=1
            break
        fi
        sleep 2
        i=$((i+1))
    done

    if [ "$found" -eq 0 ]; then
        echo "bus id: $busid not found"
    fi
}

get_artemis_bus_id() {
    case "$fru" in
        cb_accl1_1)
        busid="1-1.1.2.4.3.4"
    ;;
        cb_accl1_2)
        busid="1-1.1.2.4.3.3"
    ;;
        cb_accl2_1)
        busid="1-1.1.2.4.2.4"
    ;;
        cb_accl2_2)
        busid="1-1.1.2.4.2.3"
    ;;
        cb_accl3_1)
        busid="1-1.1.2.4.1.4"
    ;;
        cb_accl3_2)
        busid="1-1.1.2.4.1.3"
    ;;
        cb_accl4_1)
        busid="1-1.1.2.3.4"
    ;;
        cb_accl4_2)
        busid="1-1.1.2.3.3"
    ;;
        cb_accl5_1)
        busid="1-1.1.2.2.4"
    ;;
        cb_accl5_2)
        busid="1-1.1.2.2.3"
    ;;
        cb_accl6_1)
        busid="1-1.1.2.1.4"
    ;;
        cb_accl6_2)
        busid="1-1.1.2.1.3"
    ;;
        cb_accl7_1)
        busid="1-1.1.1.4.3.4"
    ;;
        cb_accl7_2)
        busid="1-1.1.1.4.3.3"
    ;;
        cb_accl8_1)
        busid="1-1.1.1.4.2.4"
    ;;
        cb_accl8_2)
        busid="1-1.1.1.4.2.3"
    ;;
        cb_accl9_1)
        busid="1-1.1.1.4.1.4"
    ;;
        cb_accl9_2)
        busid="1-1.1.1.4.1.3"
    ;;
        cb_accl10_1)
        busid="1-1.1.1.3.4"
    ;;
        cb_accl10_2)
        busid="1-1.1.1.3.3"
    ;;
        cb_accl11_1)
        busid="1-1.1.1.2.4"
    ;;
        cb_accl11_2)
        busid="1-1.1.1.2.3"
    ;;
        cb_accl12_1)
        busid="1-1.1.1.1.4"
    ;;
        cb_accl12_2)
        busid="1-1.1.1.1.3"
    ;;
        *)
        show_usage
        exit "$EXIT_ERROR";
    ;;
    esac
}

get_bus_id() {
    local i=0
    local k=0
    if [[ "$fru" =~ ^(cb_accl([1-9]|1[0-2])_(1|2))$ ]]; then
        if [[ "$dev" = "port" ]]; then
            get_artemis_bus_id
        else
            show_usage
            exit "$EXIT_ERROR";
        fi
        echo "$fru $dev usb bus id is: $busid"
    elif [[ "$fru" == "cb" ]]; then
        for i in {1..12}
        do
            for k in {1..2}
            do
                fru=cb_accl"$i"_"$k"
                if [[ "$dev" = "port" ]]; then
                    get_artemis_bus_id
                else
                    show_usage
                    exit "$EXIT_ERROR";
                fi
                echo "$fru $dev usb bus id is: $busid"
            done
        done
    else
        show_usage
        exit "$EXIT_ERROR";       
    fi
}

bind_usb() {
    if [ "$cmd" = "unbind" ] ; then
        echo "unbind $fru $dev: $busid"
        usbip unbind --busid "$busid"
    elif [ "$cmd" = "bind" ]; then
        check_file_exist
        modprobe usbip-core
        modprobe usbip-host
        usbipd -D
        sleep 1
        echo "bind $fru $dev: $busid"
        usbip bind --busid "$busid"
    else
        echo "CMD:$cmd not found"
        show_usage
        exit "$EXIT_ERROR";
    fi
}

init_usb() {
    local i=0
    local k=0
    if [ -z "$fru" ] || [ -z "$dev" ]; then
        show_usage
        exit "$EXIT_ERROR";
    fi

    if [ "$fru" = "cb" ]; then
        for i in {1..12}
        do
            for k in {1..2}
            do
                fru=cb_accl"$i"_"$k"
                get_bus_id > /dev/null
                bind_usb
            done
        done
    elif [[ "$fru" =~ ^(cb_accl([1-9]|1[0-2])_(1|2))$ ]]; then
        get_bus_id
        bind_usb
    else
        show_usage
        exit "$EXIT_ERROR";        
    fi
}

cmd=$1
fru=$2
dev=$3
busid=
retry=3

if [ $# -ne 3 ]; then
  show_usage
  exit "$EXIT_ERROR";
fi

case $cmd in
    bind)
        init_usb
    ;;

    unbind)
        init_usb
    ;;

    bus-id)
        get_bus_id
    ;;

    *)
        show_usage
        exit "$EXIT_ERROR";
    ;;
esac
